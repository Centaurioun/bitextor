name: Build and execute Bitextor tests
on:
   push:
      paths-ignore:
         - '**.md'
         - 'docs/**'
         - 'img/**'
   pull_request:
      paths-ignore:
         - '**.md'
         - 'docs/**'
         - 'img/**'
jobs:
   build_and_testing:
      name: Build and testing
      runs-on: ubuntu-20.04
      timeout-minutes: 1440
      steps:
      -  name: Set distrib release version if not set
         env:
            DR_VERSION: 20.04
         run: |
            # Hack to get setup-python to work on act (https://github.com/nektos/act/issues/213)
            if [ ! -f "/etc/lsb-release" ] ; then
               echo "DISTRIB_RELEASE=$DR_VERSION" > /etc/lsb-release
            fi
      -  name: Install required linux packages
         run: |
            apt-get --assume-yes update || sudo apt-get --assume-yes update || true
            # Docker default user is root, but is not on Github Action (https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#administrative-privileges-of-github-hosted-runners),
            #  so we use sudo and Docker will not complain and Github Actions will work
            apt-get --assume-yes install sudo || true
            sudo apt-get --assume-yes install cmake automake liblzma-dev time poppler-utils libboost-all-dev pkg-config curl git pigz wget zlib1g zlib1g-dev libgoogle-perftools-dev libsparsehash-dev coreutils uchardet libuchardet-dev libzip-dev
            sudo apt-get --assume-yes --reinstall install build-essential g++
      -  name: Set up Python3
         uses: actions/setup-python@v2
         with:
            python-version: '3.8.5'
            architecture: 'x64'
      -  name: Install Python dev tools
         run: |
            pip3 install --upgrade pip
            sudo apt-get --assume-yes install python3-venv python3-setuptools
            pip3 install Cython
      -  name: Set up JDK
         uses: actions/setup-java@v1
         with:
            java-version: 8
            java-package: jdk
            architecture: x64
      -  uses: actions/checkout@v2
      -  name: Checkout submodules
         run: git submodule update --init --force --recursive
      -  name: Install additional python requirements
         run: |
            pip3 install .
            pip3 install ./bicleaner
            pip3 install ./bicleaner-ai
            pip3 install ./kenlm --install-option="--max_order 7"
            pip3 install ./bifixer
            pip3 install ./biroamer
            python3 -c "from flair.models import SequenceTagger; SequenceTagger.load('flair/ner-english-fast')"
      -  name: Setup golang
         uses: actions/setup-go@v2
         with:
            go-version: 1.17.3
      -  name: Install giashard
         run: |
            go install github.com/paracrawl/giashard/...@latest
      -  name: Compiling bitextor and submodules
         run: |
            mkdir build_cmake && cd build_cmake
            cmake -DSKIP_MGIZA=ON -DCMAKE_INSTALL_PREFIX=/usr ..
            make -j
            sudo make install
      -  name: Run tests
         id: tests
         env:
            WORK: ${{ github.workspace }}
         run: |
            chmod 775 ./tests/run-tests-min.sh
            ./tests/run-tests-min.sh -w "$WORK" -j 4
      -  name: Print log of tests which failed
         if: ${{ steps.tests.conclusion != 'success' }}
         env:
            WORK: ${{ github.workspace }}
         run: |
            if [[ -f "${WORK}/data/fails.log" ]]; then
               while read line; do
                  eval "array=($line)"
                  status=${array[0]}
                  notest=${array[1]}
                  exit_code=${array[2]}

                  str="# Test $notest (exit code / desc.: $exit_code) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  if [[ "$(ls ${WORK}/reports/ | grep ${notest}- || true)" != "" ]]; then
                     report_file="$(ls ${WORK}/reports/${notest}-* | head -n 1)"
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$report_file"
                  else
                     echo "(warning) No report file found for test $notest (this might be normal depending on the test; check the description)"
                  fi

                  echo ""
               done < "${WORK}/data/fails.log"
            else
               >&2 echo "ERROR: could not find the file which contain the fails, and should exist"
               exit 1
            fi
      -  name: Print log subsample of tests which succeeded
         if: ${{ steps.tests.conclusion == 'success' }}
         env:
            WORK: ${{ github.workspace }}
         run: |
            for report_file in $(ls ${WORK}/reports/*); do
               notest=$(basename "$report_file" | sed -E 's/([0-9]+).*/\1/')
               sent_file=$(cat "$report_file" | grep "output:.*.sent.gz" | sed -E 's/.*output:\ (\/.*[.]sent[.]gz).*$/\1/')

               str="# Test $notest #"
               eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
               echo "$str"
               eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

               if [[ -f "$sent_file" ]]; then
                  nolines=$(zcat "$sent_file" | wc -l)

                  if [[ "$nolines" -gt "15" ]]; then
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' \
                        <(head -6 <(cat "$sent_file") \
                           && cat "$sent_file" \
                              | head -n -5 \
                              | tail -n +7 \
                              | shuf --random-source=<(yes 117 | head -100) \
                              | tail -5 \
                           && cat "$sent_file" | tail -5)
                  else
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$sent_file"
                  fi
               else
                  echo "(warning) No sent file found for test $notest"
               fi

               echo ""
            done
      -  name: Trigger intensive tests with Docker
         # Check if tests succeeded and if we have, likely, a release (it is not sure)
         if: ${{ steps.tests.outcome == 'success' && startsWith(github.ref, 'refs/tags/v') }}
         env:
            BITEXTOR_BOT_EMAIL: ${{ secrets.BITEXTOR_BOT_EMAIL }}
            BITEXTOR_BOT_PAT_DOCKER_CD: ${{ secrets.BITEXTOR_BOT_PAT_DOCKER_CD }}
         run: |
            curl -u "${BITEXTOR_BOT_EMAIL}:${BITEXTOR_BOT_PAT_DOCKER_CD}" \
                 -X POST   -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/bitextor/bitextor/actions/workflows/dockerIntensiveTests.yaml/dispatches \
                 -d '{"ref":"master","inputs":{"docker_tag":"edge"}}'
