name: Intensive tests with conda

on:
   schedule:
      - cron: '0 3 * * 0'
   workflow_dispatch:
      inputs:
         conda_package:
            description: 'Package which will be installed'
            required: false
            default: 'bitextor'
         conda_version:
            description: 'Version which will be looked for'
            required: false
            default: ''
         conda_build:
            description: 'Build which will be looked for'
            required: false
            default: ''

env:
   WORK: ${{ github.workspace }}

jobs:
   tests:
      name: ${{ matrix.name }}
      runs-on: ubuntu-20.04
      timeout-minutes: 600
      strategy:
         fail-fast: false # Continue even when a matrix job fails in order to detect as many errors as possible
         matrix:
            include:
               - name: Tests MT
                 test_id: "0x01"
               - name: Tests dictionary based
                 test_id: "0x02"
               - name: Tests generate dictionary
                 test_id: "0x04"
               - name: Tests generate bicleaner model
                 test_id: "0x08"
               - name: Tests generate dictionary and bicleaner model
                 test_id: "0x10"
               - name: Tests combining dictionaries and MT
                 test_id: "0x20"
               - name: Other tests
                 test_id: "0x40"
      defaults:
         run:
            shell: bash -l {0} # Necessary for https://github.com/conda-incubator/setup-miniconda
      steps:
      -  name: Set up Miniconda
         uses: conda-incubator/setup-miniconda@v2.1.1
         with:
            miniconda-version: "latest"
            python-version: 3.8.5
            activate-environment: bitextor-tests
            channels: bitextor,conda-forge,bioconda,dmnapolitano,esarrias
      -  name: Install Bitextor
         run: |
            v="${{ github.event.inputs.conda_package }}"

            if [[ "${{ github.event.inputs.conda_version }}" != "" ]]; then
               v="${v}=${{ github.event.inputs.conda_version }}"

               if [[ "${{ github.event.inputs.conda_build }}" != "" ]]; then
                  v="${v}=${{ github.event.inputs.conda_build }}"
               fi
            fi

            conda install -y "$v"
      -  name: Run tests
         id: run_tests
         run: |
            "${CONDA_PREFIX}/bitextor/tests/run-tests.sh" -t ${{ matrix.test_id }} -w "$WORK"
      -  name: Print log of tests which failed
         # https://github.com/actions/runner/issues/1173
         #if: ${{ steps.run_tests.conclusion != 'success' }} # Will this work with matrix as expected (i.e. affect just the specific job and not the rest)?
         if: ${{ always() }}
         run: |
            if [[ -f "${WORK}/data/fails.log" ]]; then
               while read line; do
                  eval "array=($line)"
                  status=${array[0]}
                  notest=${array[1]}
                  exit_code=${array[2]}

                  str="# Test $notest (exit code / desc.: $exit_code) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  if [[ "$(ls ${WORK}/reports/ | grep ${notest}- || true)" != "" ]]; then
                     report_file="$(ls ${WORK}/reports/${notest}-* | head -n 1)"
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$report_file"
                  else
                     echo "(warning) No report file found for test $notest (this might be normal depending on the test; check the description)"
                  fi
                  echo ""
               done < "${WORK}/data/fails.log"
            else
               >&2 echo "ERROR: could not find the file which contain the fails, and should exist"
               exit 1
            fi
      -  name: Print log subsample of tests which succeeded
         # https://github.com/actions/runner/issues/1173
         #if: ${{ steps.run_tests.conclusion == 'success' }}
         if: ${{ always() }}
         run: |
            for report_file in $(ls ${WORK}/reports/*); do
               notest=$(basename "$report_file" | sed -E 's/([0-9]+).*/\1/')
               sent_file=$(cat "$report_file" | grep "output:.*.sent.gz" | sed -E 's/.*output:\ (\/.*[.]sent[.]gz).*$/\1/')

               if [[ -f "$sent_file" ]]; then
                  md5=$(zcat "$sent_file" | md5sum | awk '{print $1}')
                  nolines=$(zcat "$sent_file" | wc -l)

                  str="# Test $notest (md5: $md5) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  if [[ "$nolines" -gt "15" ]]; then
                     awk -v prefix="(sent.gz test $notest)" '{print prefix" "$0}' \
                        <(head -6 <(zcat "$sent_file") && zcat "$sent_file" | tail -5)
                  else
                     awk -v prefix="(sent.gz test $notest)" '{print prefix" "$0}' <(zcat "$sent_file")
                  fi
               else
                  echo "(warning) No sent file found for test $notest (sent.gz file: $sent_file)"
               fi

               echo ""
            done
