name: Intensive tests with docker

on:
   schedule:
      - cron: '0 3 * * 0'
   workflow_dispatch:
      inputs:
         docker_tag:
            description: 'Tag which will be looked for'
            required: false
            default: 'edge'
         test_id:
            description: 'Run specific test ID'
            required: false
            default: 'all'
            type: choice
            options:
               - 'all'
               - '0x01'
               - '0x02'
               - '0x04'
               - '0x08'
               - '0x10'
               - '0x20'
               - '0x40'
               - '0x80'

env:
   WORK: ${{ github.workspace }}
   WORK_DOCKER: '/home/docker'
   TEST_ID: ${{ github.event.inputs.test_id || 'all' }}

jobs:
   tests:
      name: ${{ matrix.name }}
      runs-on: ubuntu-20.04
      timeout-minutes: 1440
      strategy:
         fail-fast: false # Continue even when a matrix job fails in order to detect as many errors as possible
         matrix:
            include:
               - name: Tests MT
                 test_id: "0x01"
               - name: Tests dictionary based
                 test_id: "0x02"
               - name: Tests generate dictionary
                 test_id: "0x04"
               - name: Tests generate bicleaner model
                 test_id: "0x08"
               - name: Tests generate dictionary and bicleaner model
                 test_id: "0x10"
               - name: Tests combining dictionaries and MT
                 test_id: "0x20"
               - name: Tests neural
                 test_id: "0x40"
               - name: Other tests
                 test_id: "0x80"
      defaults:
         run:
            shell: bash -l {0} # Necessary for https://github.com/conda-incubator/setup-miniconda
      steps:
      -  name: Run
         id: tests_mt
         if: ${{ env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id }}
         run: |
            tag=":edge"
            if [[ "${{ github.event.inputs.docker_tag }}" != "" ]]; then
               tag=":${{ github.event.inputs.docker_tag }}"
            fi

            sudo apt-get --assume-yes update
            sudo apt-get --assume-yes install apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \
               "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get --assume-yes update
            sudo apt-get --assume-yes install docker-ce docker-ce-cli containerd.io

            # Test docker installation
            sudo docker pull hello-world > /dev/null
            sudo docker run --rm hello-world > /dev/null

            # Download docker image
            mkdir "${WORK}/docker-volume"
            sudo docker pull "bitextor/bitextor${tag}"

            # Monitor available storage
            #echo "      date     time $(free -m | grep total | sed -E 's/^    (.*)/\1/g')"
            #while true; do
            #   echo "$(date '+%Y-%m-%d %H:%M:%S') $(LC_ALL="en_US.UTF-8" free -m | grep Mem: | sed 's/Mem://g')"
            #   sleep 1
            #done &

            # Run tests with docker
            sudo docker run \
                  -e CI="$CI" \
                  -v "${WORK}/docker-volume:${WORK_DOCKER}/volume" \
                  --name bitextor \
                  --entrypoint /bin/bash \
                  --rm "bitextor/bitextor${tag}" \
                  -c 'bitextor/tests/run-tests.sh -t ${{ matrix.test_id }}; \
                      cp -f '"${WORK_DOCKER}/data/fails.log"' '"${WORK_DOCKER}/volume"' && \
                      rm -rf '"${WORK_DOCKER}/volume/reports"' && \
                      cp -r '"${WORK_DOCKER}/reports"' '"${WORK_DOCKER}/volume"' && \
                      cp -r '"${WORK_DOCKER}/permanent"' '"${WORK_DOCKER}/volume"'' &> ./tests_output

            # Stop monitoring available disk
            kill %1

            cat ./tests_output

            # Has the execution failed?
            nolines=$(cat ${WORK}/docker-volume/fails.log | wc -l)

            [[ "$nolines" != "0" ]] && exit "$nolines" || true
      -  name: Print log of tests which failed
         # https://github.com/actions/runner/issues/1173
         #if: ${{ steps.tests.conclusion != 'success' }} # Will this work with matrix as expected (i.e. affect just the specific job and not the rest)?
         if: ${{ always() }}
         run: |
            if [[ -f "${WORK}/docker-volume/fails.log" ]]; then
               while read line; do
                  IFS=$'\t' read -r -a array <<< "$line"
                  status=${array[0]}
                  notest=${array[1]}
                  exit_code=${array[2]}

                  str="# Test $notest (exit code / desc.: $exit_code) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  report_file="${WORK}/docker-volume/reports/${notest}.report"

                  if [[ -f "$report_file" ]]; then
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$report_file"
                  else
                     echo "(warning) No report file found for test $notest (this might be normal depending on the test; check the description)"
                  fi

                  echo ""
               done < "${WORK}/docker-volume/fails.log"
            else
               >&2 echo "ERROR: could not find the file which contain the fails, and should exist"
            fi
      -  name: Upload sent.gz files (artifacts)
         uses: actions/upload-artifact@v3
         with:
            name: all-sent.gz
            path: ${{ env.WORK }}/docker-volume/permanent/**/*.sent.gz
      -  name: Upload report files (artifacts)
         uses: actions/upload-artifact@v3
         with:
            name: reports
            path: ${{ env.WORK }}/docker-volume/reports/*.report
